// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	internal "glab.tagtic.cn/ad_gains/kitty/share/internal"

	kjwt "glab.tagtic.cn/ad_gains/kitty/pkg/kjwt"

	mock "github.com/stretchr/testify/mock"
)

// InvitationManager is an autogenerated mock type for the InvitationManager type
type InvitationManager struct {
	mock.Mock
}

// AddToken provides a mock function with given fields: ctx, userId, token
func (_m *InvitationManager) AddToken(ctx context.Context, userId uint64, token string) error {
	ret := _m.Called(ctx, userId, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) error); ok {
		r0 = rf(ctx, userId, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClaimReward provides a mock function with given fields: ctx, masterId, apprenticeId
func (_m *InvitationManager) ClaimReward(ctx context.Context, masterId uint64, apprenticeId uint64) error {
	ret := _m.Called(ctx, masterId, apprenticeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) error); ok {
		r0 = rf(ctx, masterId, apprenticeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteStep provides a mock function with given fields: ctx, apprenticeId, event
func (_m *InvitationManager) CompleteStep(ctx context.Context, apprenticeId uint64, event internal.ReceivedEvent) error {
	ret := _m.Called(ctx, apprenticeId, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, internal.ReceivedEvent) error); ok {
		r0 = rf(ctx, apprenticeId, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetToken provides a mock function with given fields: ctx, id
func (_m *InvitationManager) GetToken(ctx context.Context, id uint) string {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, uint) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUrl provides a mock function with given fields: ctx, claim
func (_m *InvitationManager) GetUrl(ctx context.Context, claim *kjwt.Claim) string {
	ret := _m.Called(ctx, claim)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *kjwt.Claim) string); ok {
		r0 = rf(ctx, claim)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ListApprentices provides a mock function with given fields: ctx, masterId, depth
func (_m *InvitationManager) ListApprentices(ctx context.Context, masterId uint64, depth int) ([]internal.RelationWithRewardAmount, error) {
	ret := _m.Called(ctx, masterId, depth)

	var r0 []internal.RelationWithRewardAmount
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int) []internal.RelationWithRewardAmount); ok {
		r0 = rf(ctx, masterId, depth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.RelationWithRewardAmount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, int) error); ok {
		r1 = rf(ctx, masterId, depth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
