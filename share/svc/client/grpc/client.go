// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: e12fd89529
// Version Date: 2021-03-04T06:59:01Z

// Package grpc provides a gRPC client for the Share service.
package grpc

import (
	"context"
	"google.golang.org/grpc"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "glab.tagtic.cn/ad_gains/kitty/proto"
	"glab.tagtic.cn/ad_gains/kitty/share/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...grpctransport.ClientOption) (svc.Endpoints, error) {
	var invitebyurlEndpoint endpoint.Endpoint
	{
		invitebyurlEndpoint = grpctransport.NewClient(
			conn,
			"share.v1.Share",
			"InviteByUrl",
			EncodeGRPCInviteByUrlRequest,
			DecodeGRPCInviteByUrlResponse,
			pb.ShareDataUrlReply{},
			options...,
		).Endpoint()
	}

	var invitebytokenEndpoint endpoint.Endpoint
	{
		invitebytokenEndpoint = grpctransport.NewClient(
			conn,
			"share.v1.Share",
			"InviteByToken",
			EncodeGRPCInviteByTokenRequest,
			DecodeGRPCInviteByTokenResponse,
			pb.ShareDataTokenReply{},
			options...,
		).Endpoint()
	}

	var addinvitationcodeEndpoint endpoint.Endpoint
	{
		addinvitationcodeEndpoint = grpctransport.NewClient(
			conn,
			"share.v1.Share",
			"AddInvitationCode",
			EncodeGRPCAddInvitationCodeRequest,
			DecodeGRPCAddInvitationCodeResponse,
			pb.ShareGenericReply{},
			options...,
		).Endpoint()
	}

	var listfriendEndpoint endpoint.Endpoint
	{
		listfriendEndpoint = grpctransport.NewClient(
			conn,
			"share.v1.Share",
			"ListFriend",
			EncodeGRPCListFriendRequest,
			DecodeGRPCListFriendResponse,
			pb.ShareListFriendReply{},
			options...,
		).Endpoint()
	}

	var claimrewardEndpoint endpoint.Endpoint
	{
		claimrewardEndpoint = grpctransport.NewClient(
			conn,
			"share.v1.Share",
			"ClaimReward",
			EncodeGRPCClaimRewardRequest,
			DecodeGRPCClaimRewardResponse,
			pb.ShareGenericReply{},
			options...,
		).Endpoint()
	}

	var pushsigneventEndpoint endpoint.Endpoint
	{
		pushsigneventEndpoint = grpctransport.NewClient(
			conn,
			"share.v1.Share",
			"PushSignEvent",
			EncodeGRPCPushSignEventRequest,
			DecodeGRPCPushSignEventResponse,
			pb.ShareGenericReply{},
			options...,
		).Endpoint()
	}

	var pushtaskeventEndpoint endpoint.Endpoint
	{
		pushtaskeventEndpoint = grpctransport.NewClient(
			conn,
			"share.v1.Share",
			"PushTaskEvent",
			EncodeGRPCPushTaskEventRequest,
			DecodeGRPCPushTaskEventResponse,
			pb.ShareGenericReply{},
			options...,
		).Endpoint()
	}

	return svc.Endpoints{
		InviteByUrlEndpoint:       invitebyurlEndpoint,
		InviteByTokenEndpoint:     invitebytokenEndpoint,
		AddInvitationCodeEndpoint: addinvitationcodeEndpoint,
		ListFriendEndpoint:        listfriendEndpoint,
		ClaimRewardEndpoint:       claimrewardEndpoint,
		PushSignEventEndpoint:     pushsigneventEndpoint,
		PushTaskEventEndpoint:     pushtaskeventEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCInviteByUrlResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC invitebyurl reply to a user-domain invitebyurl response. Primarily useful in a client.
func DecodeGRPCInviteByUrlResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ShareDataUrlReply)
	return reply, nil
}

// DecodeGRPCInviteByTokenResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC invitebytoken reply to a user-domain invitebytoken response. Primarily useful in a client.
func DecodeGRPCInviteByTokenResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ShareDataTokenReply)
	return reply, nil
}

// DecodeGRPCAddInvitationCodeResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC addinvitationcode reply to a user-domain addinvitationcode response. Primarily useful in a client.
func DecodeGRPCAddInvitationCodeResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ShareGenericReply)
	return reply, nil
}

// DecodeGRPCListFriendResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC listfriend reply to a user-domain listfriend response. Primarily useful in a client.
func DecodeGRPCListFriendResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ShareListFriendReply)
	return reply, nil
}

// DecodeGRPCClaimRewardResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC claimreward reply to a user-domain claimreward response. Primarily useful in a client.
func DecodeGRPCClaimRewardResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ShareGenericReply)
	return reply, nil
}

// DecodeGRPCPushSignEventResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC pushsignevent reply to a user-domain pushsignevent response. Primarily useful in a client.
func DecodeGRPCPushSignEventResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ShareGenericReply)
	return reply, nil
}

// DecodeGRPCPushTaskEventResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC pushtaskevent reply to a user-domain pushtaskevent response. Primarily useful in a client.
func DecodeGRPCPushTaskEventResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ShareGenericReply)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCInviteByUrlRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain invitebyurl request to a gRPC invitebyurl request. Primarily useful in a client.
func EncodeGRPCInviteByUrlRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ShareEmptyRequest)
	return req, nil
}

// EncodeGRPCInviteByTokenRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain invitebytoken request to a gRPC invitebytoken request. Primarily useful in a client.
func EncodeGRPCInviteByTokenRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ShareEmptyRequest)
	return req, nil
}

// EncodeGRPCAddInvitationCodeRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain addinvitationcode request to a gRPC addinvitationcode request. Primarily useful in a client.
func EncodeGRPCAddInvitationCodeRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ShareAddInvitationRequest)
	return req, nil
}

// EncodeGRPCListFriendRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain listfriend request to a gRPC listfriend request. Primarily useful in a client.
func EncodeGRPCListFriendRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ShareListFriendRequest)
	return req, nil
}

// EncodeGRPCClaimRewardRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain claimreward request to a gRPC claimreward request. Primarily useful in a client.
func EncodeGRPCClaimRewardRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ShareClaimRewardRequest)
	return req, nil
}

// EncodeGRPCPushSignEventRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain pushsignevent request to a gRPC pushsignevent request. Primarily useful in a client.
func EncodeGRPCPushSignEventRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.SignEvent)
	return req, nil
}

// EncodeGRPCPushTaskEventRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain pushtaskevent request to a gRPC pushtaskevent request. Primarily useful in a client.
func EncodeGRPCPushTaskEventRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.TaskEvent)
	return req, nil
}
