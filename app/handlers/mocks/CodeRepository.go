// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CodeRepository is an autogenerated mock type for the CodeRepository type
type CodeRepository struct {
	mock.Mock
}

// AddCode provides a mock function with given fields: ctx, mobile
func (_m *CodeRepository) AddCode(ctx context.Context, mobile string) (string, error) {
	ret := _m.Called(ctx, mobile)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, mobile)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, mobile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCode provides a mock function with given fields: ctx, mobile, code
func (_m *CodeRepository) CheckCode(ctx context.Context, mobile string, code string) (bool, error) {
	ret := _m.Called(ctx, mobile, code)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, mobile, code)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, mobile, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCode provides a mock function with given fields: ctx, mobile
func (_m *CodeRepository) DeleteCode(ctx context.Context, mobile string) error {
	ret := _m.Called(ctx, mobile)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, mobile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
