// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ExtraRepository is an autogenerated mock type for the ExtraRepository type
type ExtraRepository struct {
	mock.Mock
}

// Del provides a mock function with given fields: ctx, id, name
func (_m *ExtraRepository) Del(ctx context.Context, id uint, name string) error {
	ret := _m.Called(ctx, id, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id, name
func (_m *ExtraRepository) Get(ctx context.Context, id uint, name string) ([]byte, error) {
	ret := _m.Called(ctx, id, name)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) []byte); ok {
		r0 = rf(ctx, id, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, id, name, extra
func (_m *ExtraRepository) Put(ctx context.Context, id uint, name string, extra []byte) error {
	ret := _m.Called(ctx, id, name, extra)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, []byte) error); ok {
		r0 = rf(ctx, id, name, extra)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
