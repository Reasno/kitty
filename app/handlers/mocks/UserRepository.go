// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "glab.tagtic.cn/ad_gains/kitty/app/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, id
func (_m *UserRepository) Get(ctx context.Context, id uint) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, ids
func (_m *UserRepository) GetAll(ctx context.Context, ids ...uint) ([]entity.User, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(context.Context, ...uint) []entity.User); ok {
		r0 = rf(ctx, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...uint) error); ok {
		r1 = rf(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFromDevice provides a mock function with given fields: ctx, packageName, suuid, device
func (_m *UserRepository) GetFromDevice(ctx context.Context, packageName string, suuid string, device *entity.Device) (*entity.User, error) {
	ret := _m.Called(ctx, packageName, suuid, device)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *entity.Device) *entity.User); ok {
		r0 = rf(ctx, packageName, suuid, device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *entity.Device) error); ok {
		r1 = rf(ctx, packageName, suuid, device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFromMobile provides a mock function with given fields: ctx, packageName, mobile, device
func (_m *UserRepository) GetFromMobile(ctx context.Context, packageName string, mobile string, device *entity.Device) (*entity.User, error) {
	ret := _m.Called(ctx, packageName, mobile, device)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *entity.Device) *entity.User); ok {
		r0 = rf(ctx, packageName, mobile, device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *entity.Device) error); ok {
		r1 = rf(ctx, packageName, mobile, device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFromWechat provides a mock function with given fields: ctx, packageName, wechat, device, wechatUser
func (_m *UserRepository) GetFromWechat(ctx context.Context, packageName string, wechat string, device *entity.Device, wechatUser entity.User) (*entity.User, error) {
	ret := _m.Called(ctx, packageName, wechat, device, wechatUser)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *entity.Device, entity.User) *entity.User); ok {
		r0 = rf(ctx, packageName, wechat, device, wechatUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *entity.Device, entity.User) error); ok {
		r1 = rf(ctx, packageName, wechat, device, wechatUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, user
func (_m *UserRepository) Save(ctx context.Context, user *entity.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, user
func (_m *UserRepository) Update(ctx context.Context, id uint, user entity.User) (*entity.User, error) {
	ret := _m.Called(ctx, id, user)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, uint, entity.User) *entity.User); ok {
		r0 = rf(ctx, id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, entity.User) error); ok {
		r1 = rf(ctx, id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
