// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package handlers

import (
	"github.com/Reasno/kitty/app/repository"
	"github.com/Reasno/kitty/pkg/contract"
	"github.com/Reasno/kitty/pkg/http"
	"github.com/Reasno/kitty/pkg/sms"
	"github.com/Reasno/kitty/proto"
	"github.com/go-redis/redis/v8"
	"github.com/google/wire"
	"github.com/spf13/viper"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func injectDb() (*gorm.DB, error) {
	viper, err := provideConfig()
	if err != nil {
		return nil, err
	}
	dialector, err := provideDialector(viper)
	if err != nil {
		return nil, err
	}
	logger := provideLogger(viper)
	config := provideGormConfig(logger)
	db, err := provideGormDB(dialector, config)
	if err != nil {
		return nil, err
	}
	return db, nil
}

func injectModule() (*AppModule, func(), error) {
	viper, err := provideConfig()
	if err != nil {
		return nil, nil, err
	}
	logger := provideLogger(viper)
	jaegerLogger := provideJaegerLogAdatper(logger)
	tracer, cleanup, err := provideOpentracing(jaegerLogger, viper)
	if err != nil {
		return nil, nil, err
	}
	securityConfig := provideSecurityConfig(viper)
	histogram := provideHistogramMetrics(viper)
	handlersOverallMiddleware := provideEndpointsMiddleware(securityConfig, histogram, tracer)
	dialector, err := provideDialector(viper)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	config := provideGormConfig(logger)
	db, err := provideGormDB(dialector, config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userRepo := repository.NewUserRepo(db)
	universalClient, cleanup2 := provideRedis(logger, viper)
	codeRepo := repository.NewCodeRepo(universalClient)
	client := provideHttpClient(tracer)
	transportConfig := provideSmsConfig(client, viper)
	transport := sms.NewTransport(transportConfig)
	handlersAppService := appService{
		log:    logger,
		ur:     userRepo,
		cr:     codeRepo,
		sender: transport,
	}
	appModule := provideModule(tracer, logger, handlersOverallMiddleware, handlersAppService)
	return appModule, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var ConfigSet = wire.NewSet(provideConfig, wire.Bind(new(contract.ConfigReader), new(*viper.Viper)))

var DbSet = wire.NewSet(
	provideDialector,
	provideGormConfig,
	provideGormDB,
)

var OpenTracingSet = wire.NewSet(
	provideJaegerLogAdatper,
	provideOpentracing,
)

var AppServerSet = wire.NewSet(
	ConfigSet,
	provideLogger,
	provideSmsConfig,
	DbSet,
	OpenTracingSet,
	provideHttpClient,
	provideRedis, sms.NewTransport, repository.NewUserRepo, repository.NewCodeRepo, wire.Struct(new(appService), "*"), wire.Bind(new(redis.Cmdable), new(redis.UniversalClient)), wire.Bind(new(contract.SmsSender), new(*sms.Transport)), wire.Bind(new(contract.HttpDoer), new(*http.Client)), wire.Bind(new(kitty.AppServer), new(appService)), wire.Bind(new(UserRepository), new(*repository.UserRepo)), wire.Bind(new(CodeRepository), new(*repository.CodeRepo)),
)
