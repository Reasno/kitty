// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package handlers

import (
	"github.com/Reasno/kitty/app/repository"
	"github.com/Reasno/kitty/pkg/sms"
	"github.com/Reasno/kitty/proto"
	"github.com/go-kit/kit/log"
	"github.com/google/wire"
	"github.com/opentracing/opentracing-go"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func injectDb() (*gorm.DB, error) {
	dialector := provideDialector()
	viper, err := provideConfig()
	if err != nil {
		return nil, err
	}
	logger := provideLogger(viper)
	config := provideGormConfig(logger)
	db, err := provideGormDB(dialector, config)
	if err != nil {
		return nil, err
	}
	return db, nil
}

func injectAppServer() (kitty.AppServer, func(), error) {
	viper, err := provideConfig()
	if err != nil {
		return nil, nil, err
	}
	logger := provideLogger(viper)
	dialector := provideDialector()
	config := provideGormConfig(logger)
	db, err := provideGormDB(dialector, config)
	if err != nil {
		return nil, nil, err
	}
	userRepo := repository.NewUserRepo(db)
	universalClient, cleanup := provideRedis(logger, viper)
	codeRepo := repository.NewCodeRepo(universalClient)
	jaegerLogger := provideJaegerLogAdatper(logger)
	opentracingTracer, cleanup2 := provideOpentracing(jaegerLogger, viper)
	client := provideHttpClient(opentracingTracer)
	transportConfig := provideSmsConfig(client, viper)
	transport := sms.NewTransport(transportConfig)
	handlersAppService := appService{
		log:    logger,
		ur:     userRepo,
		cr:     codeRepo,
		sender: transport,
	}
	return handlersAppService, func() {
		cleanup2()
		cleanup()
	}, nil
}

func injectLogger() (log.Logger, error) {
	viper, err := provideConfig()
	if err != nil {
		return nil, err
	}
	logger := provideLogger(viper)
	return logger, nil
}

func injectOpentracingTracer() (opentracing.Tracer, func(), error) {
	viper, err := provideConfig()
	if err != nil {
		return nil, nil, err
	}
	logger := provideLogger(viper)
	jaegerLogger := provideJaegerLogAdatper(logger)
	opentracingTracer, cleanup := provideOpentracing(jaegerLogger, viper)
	return opentracingTracer, func() {
		cleanup()
	}, nil
}

// wire.go:

var DbSet = wire.NewSet(
	provideDialector,
	provideGormConfig,
	provideGormDB,
)

var OpenTracingSet = wire.NewSet(
	provideJaegerLogAdatper,
	provideOpentracing,
)
