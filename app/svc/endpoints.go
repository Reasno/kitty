// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 831b290599
// Version Date: 2020-11-16T05:27:36Z

package svc

// This file contains methods to make individual endpoints from services,
// request and response types to serve those endpoints, as well as encoders and
// decoders for those types, for all of our supported transport serialization
// formats.

import (
	"context"
	"fmt"

	"github.com/go-kit/kit/endpoint"

	pb "glab.tagtic.cn/ad_gains/kitty/proto"
)

// Endpoints collects all of the endpoints that compose an add service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
//
// In a server, it's useful for functions that need to operate on a per-endpoint
// basis. For example, you might pass an Endpoints to a function that produces
// an http.Handler, with each method (endpoint) wired up to a specific path. (It
// is probably a mistake in design to invoke the Service methods on the
// Endpoints struct in a server.)
//
// In a client, it's useful to collect individually constructed endpoints into a
// single type that implements the Service interface. For example, you might
// construct individual endpoints using transport/http.NewClient, combine them into an Endpoints, and return it to the caller as a Service.
type Endpoints struct {
	LoginEndpoint      endpoint.Endpoint
	GetCodeEndpoint    endpoint.Endpoint
	GetInfoEndpoint    endpoint.Endpoint
	UpdateInfoEndpoint endpoint.Endpoint
	BindEndpoint       endpoint.Endpoint
	UnbindEndpoint     endpoint.Endpoint
	RefreshEndpoint    endpoint.Endpoint
}

func NewEndpoints(service pb.AppServer) Endpoints {

	// Endpoint domain.
	var (
		loginEndpoint      = MakeLoginEndpoint(service)
		getcodeEndpoint    = MakeGetCodeEndpoint(service)
		getinfoEndpoint    = MakeGetInfoEndpoint(service)
		updateinfoEndpoint = MakeUpdateInfoEndpoint(service)
		bindEndpoint       = MakeBindEndpoint(service)
		unbindEndpoint     = MakeUnbindEndpoint(service)
		refreshEndpoint    = MakeRefreshEndpoint(service)
	)

	endpoints := Endpoints{
		LoginEndpoint:      loginEndpoint,
		GetCodeEndpoint:    getcodeEndpoint,
		GetInfoEndpoint:    getinfoEndpoint,
		UpdateInfoEndpoint: updateinfoEndpoint,
		BindEndpoint:       bindEndpoint,
		UnbindEndpoint:     unbindEndpoint,
		RefreshEndpoint:    refreshEndpoint,
	}

	return endpoints
}

// Endpoints

func (e Endpoints) Login(ctx context.Context, in *pb.UserLoginRequest) (*pb.UserInfoReply, error) {
	response, err := e.LoginEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) GetCode(ctx context.Context, in *pb.GetCodeRequest) (*pb.GenericReply, error) {
	response, err := e.GetCodeEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.GenericReply), nil
}

func (e Endpoints) GetInfo(ctx context.Context, in *pb.UserInfoRequest) (*pb.UserInfoReply, error) {
	response, err := e.GetInfoEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) UpdateInfo(ctx context.Context, in *pb.UserInfoUpdateRequest) (*pb.UserInfoReply, error) {
	response, err := e.UpdateInfoEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) Bind(ctx context.Context, in *pb.UserBindRequest) (*pb.UserInfoReply, error) {
	response, err := e.BindEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) Unbind(ctx context.Context, in *pb.UserUnbindRequest) (*pb.UserInfoReply, error) {
	response, err := e.UnbindEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

func (e Endpoints) Refresh(ctx context.Context, in *pb.UserRefreshRequest) (*pb.UserInfoReply, error) {
	response, err := e.RefreshEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.UserInfoReply), nil
}

// Make Endpoints

func MakeLoginEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserLoginRequest)
		v, err := s.Login(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeGetCodeEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.GetCodeRequest)
		v, err := s.GetCode(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeGetInfoEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserInfoRequest)
		v, err := s.GetInfo(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeUpdateInfoEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserInfoUpdateRequest)
		v, err := s.UpdateInfo(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeBindEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserBindRequest)
		v, err := s.Bind(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeUnbindEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserUnbindRequest)
		v, err := s.Unbind(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeRefreshEndpoint(s pb.AppServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UserRefreshRequest)
		v, err := s.Refresh(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

// WrapAllExcept wraps each Endpoint field of struct Endpoints with a
// go-kit/kit/endpoint.Middleware.
// Use this for applying a set of middlewares to every endpoint in the service.
// Optionally, endpoints can be passed in by name to be excluded from being wrapped.
// WrapAllExcept(middleware, "Status", "Ping")
func (e *Endpoints) WrapAllExcept(middleware endpoint.Middleware, excluded ...string) {
	included := map[string]struct{}{
		"Login":      {},
		"GetCode":    {},
		"GetInfo":    {},
		"UpdateInfo": {},
		"Bind":       {},
		"Unbind":     {},
		"Refresh":    {},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		if inc == "Login" {
			e.LoginEndpoint = middleware(e.LoginEndpoint)
		}
		if inc == "GetCode" {
			e.GetCodeEndpoint = middleware(e.GetCodeEndpoint)
		}
		if inc == "GetInfo" {
			e.GetInfoEndpoint = middleware(e.GetInfoEndpoint)
		}
		if inc == "UpdateInfo" {
			e.UpdateInfoEndpoint = middleware(e.UpdateInfoEndpoint)
		}
		if inc == "Bind" {
			e.BindEndpoint = middleware(e.BindEndpoint)
		}
		if inc == "Unbind" {
			e.UnbindEndpoint = middleware(e.UnbindEndpoint)
		}
		if inc == "Refresh" {
			e.RefreshEndpoint = middleware(e.RefreshEndpoint)
		}
	}
}

// LabeledMiddleware will get passed the endpoint name when passed to
// WrapAllLabeledExcept, this can be used to write a generic metrics
// middleware which can send the endpoint name to the metrics collector.
type LabeledMiddleware func(string, endpoint.Endpoint) endpoint.Endpoint

// WrapAllLabeledExcept wraps each Endpoint field of struct Endpoints with a
// LabeledMiddleware, which will receive the name of the endpoint. See
// LabeldMiddleware. See method WrapAllExept for details on excluded
// functionality.
func (e *Endpoints) WrapAllLabeledExcept(middleware func(string, endpoint.Endpoint) endpoint.Endpoint, excluded ...string) {
	included := map[string]struct{}{
		"Login":      {},
		"GetCode":    {},
		"GetInfo":    {},
		"UpdateInfo": {},
		"Bind":       {},
		"Unbind":     {},
		"Refresh":    {},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		if inc == "Login" {
			e.LoginEndpoint = middleware("Login", e.LoginEndpoint)
		}
		if inc == "GetCode" {
			e.GetCodeEndpoint = middleware("GetCode", e.GetCodeEndpoint)
		}
		if inc == "GetInfo" {
			e.GetInfoEndpoint = middleware("GetInfo", e.GetInfoEndpoint)
		}
		if inc == "UpdateInfo" {
			e.UpdateInfoEndpoint = middleware("UpdateInfo", e.UpdateInfoEndpoint)
		}
		if inc == "Bind" {
			e.BindEndpoint = middleware("Bind", e.BindEndpoint)
		}
		if inc == "Unbind" {
			e.UnbindEndpoint = middleware("Unbind", e.UnbindEndpoint)
		}
		if inc == "Refresh" {
			e.RefreshEndpoint = middleware("Refresh", e.RefreshEndpoint)
		}
	}
}
