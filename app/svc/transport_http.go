// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 7a2c1937dc
// Version Date: 2020-12-18T05:47:48Z

package svc

// This file provides server-side bindings for the HTTP transport.
// It utilizes the transport/http.Server.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/golang/protobuf/jsonpb"

	"context"

	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/gorilla/mux"
	"github.com/pkg/errors"

	// This service
	pb "glab.tagtic.cn/ad_gains/kitty/proto"
)

const contentType = "application/json; charset=utf-8"

var (
	_ = fmt.Sprint
	_ = bytes.Compare
	_ = strconv.Atoi
	_ = httptransport.NewServer
	_ = ioutil.NopCloser
	_ = pb.NewAppClient
	_ = io.Copy
	_ = errors.Wrap
)

// MakeHTTPHandler returns a handler that makes a set of endpoints available
// on predefined paths.
func MakeHTTPHandler(endpoints Endpoints, options ...httptransport.ServerOption) http.Handler {
	serverOptions := []httptransport.ServerOption{
		httptransport.ServerBefore(headersToContext),
		httptransport.ServerErrorEncoder(errorEncoder),
		httptransport.ServerAfter(httptransport.SetContentType(contentType)),
	}
	serverOptions = append(serverOptions, options...)
	m := mux.NewRouter()

	m.Methods("POST").Path("/login").Handler(httptransport.NewServer(
		endpoints.LoginEndpoint,
		DecodeHTTPLoginZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Methods("GET").Path("/code").Handler(httptransport.NewServer(
		endpoints.GetCodeEndpoint,
		DecodeHTTPGetCodeZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Methods("GET").Path("/info/{id}").Handler(httptransport.NewServer(
		endpoints.GetInfoEndpoint,
		DecodeHTTPGetInfoZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Methods("GET").Path("/batch/info").Handler(httptransport.NewServer(
		endpoints.GetInfoBatchEndpoint,
		DecodeHTTPGetInfoBatchZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Methods("POST").Path("/info").Handler(httptransport.NewServer(
		endpoints.UpdateInfoEndpoint,
		DecodeHTTPUpdateInfoZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Methods("POST").Path("/bind").Handler(httptransport.NewServer(
		endpoints.BindEndpoint,
		DecodeHTTPBindZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Methods("POST").Path("/unbind").Handler(httptransport.NewServer(
		endpoints.UnbindEndpoint,
		DecodeHTTPUnbindZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Methods("POST").Path("/refresh").Handler(httptransport.NewServer(
		endpoints.RefreshEndpoint,
		DecodeHTTPRefreshZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Methods("DELETE").Path("/info/{id}").Handler(httptransport.NewServer(
		endpoints.SoftDeleteEndpoint,
		DecodeHTTPSoftDeleteZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))
	return m
}

// ErrorEncoder writes the error to the ResponseWriter, by default a content
// type of application/json, a body of json with key "error" and the value
// error.Error(), and a status code of 500. If the error implements Headerer,
// the provided headers will be applied to the response. If the error
// implements json.Marshaler, and the marshaling succeeds, the JSON encoded
// form of the error will be used. If the error implements StatusCoder, the
// provided StatusCode will be used instead of 500.
func errorEncoder(_ context.Context, err error, w http.ResponseWriter) {
	body, _ := json.Marshal(errorWrapper{Error: err.Error()})
	if marshaler, ok := err.(json.Marshaler); ok {
		if jsonBody, marshalErr := marshaler.MarshalJSON(); marshalErr == nil {
			body = jsonBody
		}
	}
	w.Header().Set("Content-Type", contentType)
	if headerer, ok := err.(httptransport.Headerer); ok {
		for k := range headerer.Headers() {
			w.Header().Set(k, headerer.Headers().Get(k))
		}
	}
	code := http.StatusInternalServerError
	if sc, ok := err.(httptransport.StatusCoder); ok {
		code = sc.StatusCode()
	}
	w.WriteHeader(code)
	w.Write(body)
}

type errorWrapper struct {
	Error string `json:"error"`
}

// httpError satisfies the Headerer and StatusCoder interfaces in
// package github.com/go-kit/kit/transport/http.
type httpError struct {
	error
	statusCode int
	headers    map[string][]string
}

func (h httpError) StatusCode() int {
	return h.statusCode
}

func (h httpError) Headers() http.Header {
	return h.headers
}

// Server Decode

// DecodeHTTPLoginZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded login request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPLoginZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.UserLoginRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPGetCodeZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded getcode request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPGetCodeZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.GetCodeRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if MobileGetCodeStrArr, ok := queryParams["mobile"]; ok {
		MobileGetCodeStr := MobileGetCodeStrArr[0]
		MobileGetCode := MobileGetCodeStr
		req.Mobile = MobileGetCode
	}

	if PackageNameGetCodeStrArr, ok := queryParams["packageName"]; ok {
		PackageNameGetCodeStr := PackageNameGetCodeStrArr[0]
		PackageNameGetCode := PackageNameGetCodeStr
		req.PackageName = PackageNameGetCode
	}

	return &req, err
}

// DecodeHTTPGetInfoZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded getinfo request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPGetInfoZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.UserInfoRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	IdGetInfoStr := pathParams["id"]
	IdGetInfo, err := strconv.ParseUint(IdGetInfoStr, 10, 64)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting IdGetInfo from path, pathParams: %v", pathParams))
	}
	req.Id = IdGetInfo

	if WechatGetInfoStrArr, ok := queryParams["wechat"]; ok {
		WechatGetInfoStr := WechatGetInfoStrArr[0]
		WechatGetInfo, err := strconv.ParseBool(WechatGetInfoStr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting WechatGetInfo from query, queryParams: %v", queryParams))
		}
		req.Wechat = WechatGetInfo
	}

	if TaobaoGetInfoStrArr, ok := queryParams["taobao"]; ok {
		TaobaoGetInfoStr := TaobaoGetInfoStrArr[0]
		TaobaoGetInfo, err := strconv.ParseBool(TaobaoGetInfoStr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting TaobaoGetInfo from query, queryParams: %v", queryParams))
		}
		req.Taobao = TaobaoGetInfo
	}

	return &req, err
}

// DecodeHTTPGetInfoBatchZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded getinfobatch request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPGetInfoBatchZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.UserInfoBatchRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if IdGetInfoBatchStrArr, ok := queryParams["id"]; ok {
		IdGetInfoBatchStr := IdGetInfoBatchStrArr[0]

		var IdGetInfoBatch []uint64
		if len(IdGetInfoBatchStrArr) > 1 {
			IdGetInfoBatch = make([]uint64, len(IdGetInfoBatchStrArr))
			for i, v := range IdGetInfoBatchStrArr {
				converted, err := strconv.ParseUint(v, 10, 64)
				if err != nil {
					return nil, errors.Wrapf(err, "couldn't decode IdGetInfoBatch from %v", IdGetInfoBatchStr)
				}
				IdGetInfoBatch[i] = converted
			}
		} else {
			err = json.Unmarshal([]byte(IdGetInfoBatchStr), &IdGetInfoBatch)
			if err != nil {
				IdGetInfoBatchStr = "[" + IdGetInfoBatchStr + "]"
			}
			err = json.Unmarshal([]byte(IdGetInfoBatchStr), &IdGetInfoBatch)
		}
		if err != nil {
			return nil, errors.Wrapf(err, "couldn't decode IdGetInfoBatch from %v", IdGetInfoBatchStr)
		}
		req.Id = IdGetInfoBatch
	}

	if InviteCodeGetInfoBatchStrArr, ok := queryParams["invite_code"]; ok {
		InviteCodeGetInfoBatchStr := InviteCodeGetInfoBatchStrArr[0]

		var InviteCodeGetInfoBatch []string
		if len(InviteCodeGetInfoBatchStrArr) > 1 {
			InviteCodeGetInfoBatch = InviteCodeGetInfoBatchStrArr
		} else {
			InviteCodeGetInfoBatch = strings.Split(InviteCodeGetInfoBatchStr, ",")
		}
		req.InviteCode = InviteCodeGetInfoBatch
	}

	if PackageNameGetInfoBatchStrArr, ok := queryParams["packageName"]; ok {
		PackageNameGetInfoBatchStr := PackageNameGetInfoBatchStrArr[0]
		PackageNameGetInfoBatch := PackageNameGetInfoBatchStr
		req.PackageName = PackageNameGetInfoBatch
	}

	if AfterGetInfoBatchStrArr, ok := queryParams["after"]; ok {
		AfterGetInfoBatchStr := AfterGetInfoBatchStrArr[0]
		AfterGetInfoBatch, err := strconv.ParseInt(AfterGetInfoBatchStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting AfterGetInfoBatch from query, queryParams: %v", queryParams))
		}
		req.After = AfterGetInfoBatch
	}

	if BeforeGetInfoBatchStrArr, ok := queryParams["before"]; ok {
		BeforeGetInfoBatchStr := BeforeGetInfoBatchStrArr[0]
		BeforeGetInfoBatch, err := strconv.ParseInt(BeforeGetInfoBatchStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting BeforeGetInfoBatch from query, queryParams: %v", queryParams))
		}
		req.Before = BeforeGetInfoBatch
	}

	if MobileGetInfoBatchStrArr, ok := queryParams["mobile"]; ok {
		MobileGetInfoBatchStr := MobileGetInfoBatchStrArr[0]
		MobileGetInfoBatch := MobileGetInfoBatchStr
		req.Mobile = MobileGetInfoBatch
	}

	if NameGetInfoBatchStrArr, ok := queryParams["name"]; ok {
		NameGetInfoBatchStr := NameGetInfoBatchStrArr[0]
		NameGetInfoBatch := NameGetInfoBatchStr
		req.Name = NameGetInfoBatch
	}

	if PerPageGetInfoBatchStrArr, ok := queryParams["perPage"]; ok {
		PerPageGetInfoBatchStr := PerPageGetInfoBatchStrArr[0]
		PerPageGetInfoBatch, err := strconv.ParseInt(PerPageGetInfoBatchStr, 10, 32)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting PerPageGetInfoBatch from query, queryParams: %v", queryParams))
		}
		req.PerPage = int32(PerPageGetInfoBatch)
	}

	if PageGetInfoBatchStrArr, ok := queryParams["page"]; ok {
		PageGetInfoBatchStr := PageGetInfoBatchStrArr[0]
		PageGetInfoBatch, err := strconv.ParseInt(PageGetInfoBatchStr, 10, 32)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting PageGetInfoBatch from query, queryParams: %v", queryParams))
		}
		req.Page = int32(PageGetInfoBatch)
	}

	return &req, err
}

// DecodeHTTPUpdateInfoZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded updateinfo request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPUpdateInfoZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.UserInfoUpdateRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPBindZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded bind request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPBindZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.UserBindRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPUnbindZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded unbind request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPUnbindZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.UserUnbindRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPRefreshZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded refresh request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPRefreshZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.UserRefreshRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPSoftDeleteZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded softdelete request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPSoftDeleteZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.UserSoftDeleteRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	IdSoftDeleteStr := pathParams["id"]
	IdSoftDelete, err := strconv.ParseUint(IdSoftDeleteStr, 10, 64)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting IdSoftDelete from path, pathParams: %v", pathParams))
	}
	req.Id = IdSoftDelete

	return &req, err
}

// EncodeHTTPGenericResponse is a transport/http.EncodeResponseFunc that encodes
// the response as JSON to the response writer. Primarily useful in a server.
func EncodeHTTPGenericResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {
	marshaller := jsonpb.Marshaler{
		EmitDefaults: true,
		OrigName:     true,
	}

	return marshaller.Marshal(w, response.(proto.Message))
}

// Helper functions

func headersToContext(ctx context.Context, r *http.Request) context.Context {
	for k := range r.Header {
		// The key is added both in http format (k) which has had
		// http.CanonicalHeaderKey called on it in transport as well as the
		// strings.ToLower which is the grpc metadata format of the key so
		// that it can be accessed in either format
		ctx = context.WithValue(ctx, k, r.Header.Get(k))
		ctx = context.WithValue(ctx, strings.ToLower(k), r.Header.Get(k))
	}

	// Tune specific change.
	// also add the request url
	ctx = context.WithValue(ctx, "request-url", r.URL.Path)
	ctx = context.WithValue(ctx, "transport", "HTTPJSON")

	return ctx
}
