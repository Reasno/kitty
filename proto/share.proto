syntax = "proto3";

package share.v1;

import "google/api/annotations.proto";
import "protoc-gen-validate/validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "gogoproto/gogo.proto";
import "app.proto";

option go_package = "kitty";

option (options.openapiv2_swagger) = {
  info: {
    title: "商业化中台分享服务";
    version: "0.1.0";
    contact: {
      name: "谷溪";
      email: "guxi@infinities.com.cn";
    };
  };
  base_path: "/share/v1"
  security_definitions: {
    security: {
      key: "JWT",
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
      }
    }
  }
  security: {
    security_requirement: {
      key: "JWT";
      value: {};
    }
  }
  consumes: "application/json";
  produces: "application/json";
  external_docs: {
    description: "商业化中台文档"
    url: "http://monetization-docs.xg.tagtic.cn/#/"
  }
};

// 分享服务
service Share {
  // 获取邀请链接
  rpc InviteByUrl (ShareEmptyRequest) returns (ShareDataUrlReply) {
    option (options.openapiv2_operation) = {
      tags: "分享"
    };
    option (google.api.http) = {
      get: "/url"
    };
  }

  // 获取邀请码
  rpc InviteByToken (ShareEmptyRequest) returns (ShareDataTokenReply) {
    option (options.openapiv2_operation) = {
      tags: "分享"
    };
    option (google.api.http) = {
      get: "/code"
    };
  }

  // 填写邀请码
  rpc AddInvitationCode (ShareAddInvitationRequest) returns (ShareGenericReply) {
    option (options.openapiv2_operation) = {
      tags: "分享"
    };
    option (google.api.http) = {
      put: "/code"
      body: "*"
    };
  }

  // 获取邀请列表
  rpc ListFriend (ShareListFriendRequest) returns (ShareListFriendReply) {
    option (options.openapiv2_operation) = {
      tags: "分享"
    };
    option (google.api.http) = {
      get: "/list"
    };
  }

  // 领取邀请后的奖励
  rpc ClaimReward (ShareClaimRewardRequest) returns (ShareGenericReply) {
    option (options.openapiv2_operation) = {
      tags: "分享"
    };
    option (google.api.http) = {
      post: "/claim"
      body: "*"
    };
  }

  // 通过徒弟反查师傅和师爷。填0获取本人信息
  rpc GetMaster (ShareGetMasterRequest) returns (ShareGetMasterReply) {
    option (options.openapiv2_operation) = {
      tags: "分享"
    };
    option (google.api.http) = {
      get: "/get-master/{id}"
    };
  }

  // 手动推送签到事件
  rpc PushSignEvent (SignEvent) returns (ShareGenericReply) {
    option (options.openapiv2_operation) = {
      tags: "事件同步"
    };
    option (google.api.http) = {
      post: "/event/sign"
      body: "*"
    };
  }

  // 手动推送任务事件
  rpc PushTaskEvent (TaskEvent) returns (ShareGenericReply) {
    option (options.openapiv2_operation) = {
      tags: "事件同步"
    };
    option (google.api.http) = {
      post: "/event/task"
      body: "*"
    };
  }
}

message ShareClaimRewardRequest {
  uint64 apprenticeId = 1;
}

message ShareClaimRewardReply {

}

message ShareListFriendRequest {
  int32 depth = 1 [(validate.rules).int32 = {in: [1, 2]}];
}

message ShareListFriendReply {
  int32 code = 1 [(gogoproto.jsontag) = "code"];
  string msg = 2;
  ShareListFriendData data = 3;
}

message ShareListFriendData {
  repeated ShareListFriendDataItem items = 1;
  int32 count_all = 2; // 获取激活数
  int32 count_not_ready = 3; // 获取未激活数
}

enum ClaimStatus {
  UNKNOWN_CLAIM_STATUS = 0;
  DONE = 1; // 已领取
  READY = 2; // 可领取
  NOT_READY = 3; // 不可领取（任务未完成）
}

message ShareListFriendDataItem {
  uint64 id = 1; // 用户ID
  string user_name = 2; // 用户名称
  string head_img = 4; // 头像
  app.v2.Gender gender = 5; // 性别
  map<string, bool> steps = 6; // 任务完成进度。可能有很多个子任务，true为子任务完成。
  ClaimStatus claim_status = 7;  // 金币领取情况
  int32 coin = 8; // 邀请改用户可获得的金币数量。
  int64 create_at = 9; // 创建时间
}

message ShareDataUrlReply {
  message Url {
    string url = 1;
  }
  int32 code = 1 [(gogoproto.jsontag) = "code"];
  string msg = 2;
  Url data = 3;
}

message ShareDataTokenReply {
  message Code {
    string code = 1;
  }
  int32 code = 1 [(gogoproto.jsontag) = "code"];
  string msg = 2;
  Code data = 3;
}

message ShareAddInvitationRequest {
  string invite_code = 1;
}

message ShareGetMasterRequest {
  uint64 id = 1; // 徒弟用户ID
}

message ShareGetMasterReply {
  message Data {
    app.v2.UserInfo master = 1;
    app.v2.UserInfo grandMaster = 2;
  }
  int32 code = 1 [(gogoproto.jsontag) = "code"];
  string msg = 2;
  Data data = 3;

}

message ShareEmptyRequest {
}

message ShareGenericReply {
  int32 code = 1 [(gogoproto.jsontag) = "code"];
  string msg = 2;
}

message TaskEvent {
  int32 id = 1; // 任务id
  uint64 user_id = 2; // 用户id
  string package_name = 3; // 应用包名
  string channel = 4; // 渠道
  string name = 5; // 任务名称
  string event_name = 6; // 自定义事件名称
  int32 score = 7; // 任务分数
  string date_time = 8; // 时间发生时间 2020-12-17 18:12:22
  string third_party_id = 9; // 第三方id，用于给第三方系统回调
  int32 done_num = 10; // 任务完成次数
  int32 total_num = 11; // 任务每日可执行次数
  bool is_done = 12; // 任务是否完成
  string ext = 13; // 扩展字段，补充业务使用
}

message SignEvent{
  int32 id = 1; // 签到天数
  uint64 user_id = 2; // 用户id
  string package_name = 3; // 应用包名
  string channel = 4; // 渠道
  string name = 5; // 任务名称
  string event_name = 6; // 自定义事件名称
  int32 score = 7; // 任务分数
  string date_time = 8; // 时间发生时间 2020-12-17 18:12:22
  string third_party_id = 9; // 第三方id，用于给第三方系统回调
  bool is_double = 10; // 签到是否翻倍
  string ext = 11; // 扩展字段，补充业务使用
}

message InvitationInfo {
  uint64 invitee_id = 1; // 受邀者ID 即: 用户ID
  uint64 inviter_id = 2; // 邀请者ID
  string date_time = 3; // 邀请时间 2020-12-17 18:12:22
  string package_name = 4; // 应用包名
  string channel = 5; // 渠道
  string ipv4 = 6; // IP 地址
}
