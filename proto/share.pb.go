// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: share.proto

package kitty

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClaimStatus int32

const (
	ClaimStatus_UNKNOWN_CLAIM_STATUS ClaimStatus = 0
	ClaimStatus_DONE                 ClaimStatus = 1
	ClaimStatus_READY                ClaimStatus = 2
	ClaimStatus_NOT_READY            ClaimStatus = 3
)

var ClaimStatus_name = map[int32]string{
	0: "UNKNOWN_CLAIM_STATUS",
	1: "DONE",
	2: "READY",
	3: "NOT_READY",
}

var ClaimStatus_value = map[string]int32{
	"UNKNOWN_CLAIM_STATUS": 0,
	"DONE":                 1,
	"READY":                2,
	"NOT_READY":            3,
}

func (x ClaimStatus) String() string {
	return proto.EnumName(ClaimStatus_name, int32(x))
}

func (ClaimStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{0}
}

type ShareClaimRewardRequest struct {
	ApprenticeId         uint64   `protobuf:"varint,1,opt,name=apprenticeId,proto3" json:"apprenticeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareClaimRewardRequest) Reset()         { *m = ShareClaimRewardRequest{} }
func (m *ShareClaimRewardRequest) String() string { return proto.CompactTextString(m) }
func (*ShareClaimRewardRequest) ProtoMessage()    {}
func (*ShareClaimRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{0}
}
func (m *ShareClaimRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareClaimRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareClaimRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareClaimRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareClaimRewardRequest.Merge(m, src)
}
func (m *ShareClaimRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShareClaimRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareClaimRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShareClaimRewardRequest proto.InternalMessageInfo

func (m *ShareClaimRewardRequest) GetApprenticeId() uint64 {
	if m != nil {
		return m.ApprenticeId
	}
	return 0
}

type ShareClaimRewardReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareClaimRewardReply) Reset()         { *m = ShareClaimRewardReply{} }
func (m *ShareClaimRewardReply) String() string { return proto.CompactTextString(m) }
func (*ShareClaimRewardReply) ProtoMessage()    {}
func (*ShareClaimRewardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{1}
}
func (m *ShareClaimRewardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareClaimRewardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareClaimRewardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareClaimRewardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareClaimRewardReply.Merge(m, src)
}
func (m *ShareClaimRewardReply) XXX_Size() int {
	return m.Size()
}
func (m *ShareClaimRewardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareClaimRewardReply.DiscardUnknown(m)
}

var xxx_messageInfo_ShareClaimRewardReply proto.InternalMessageInfo

type ShareListFriendRequest struct {
	Depth                int32    `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareListFriendRequest) Reset()         { *m = ShareListFriendRequest{} }
func (m *ShareListFriendRequest) String() string { return proto.CompactTextString(m) }
func (*ShareListFriendRequest) ProtoMessage()    {}
func (*ShareListFriendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{2}
}
func (m *ShareListFriendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareListFriendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareListFriendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareListFriendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareListFriendRequest.Merge(m, src)
}
func (m *ShareListFriendRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShareListFriendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareListFriendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShareListFriendRequest proto.InternalMessageInfo

func (m *ShareListFriendRequest) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

type ShareListFriendReply struct {
	Code                 int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Msg                  string               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 *ShareListFriendData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ShareListFriendReply) Reset()         { *m = ShareListFriendReply{} }
func (m *ShareListFriendReply) String() string { return proto.CompactTextString(m) }
func (*ShareListFriendReply) ProtoMessage()    {}
func (*ShareListFriendReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{3}
}
func (m *ShareListFriendReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareListFriendReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareListFriendReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareListFriendReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareListFriendReply.Merge(m, src)
}
func (m *ShareListFriendReply) XXX_Size() int {
	return m.Size()
}
func (m *ShareListFriendReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareListFriendReply.DiscardUnknown(m)
}

var xxx_messageInfo_ShareListFriendReply proto.InternalMessageInfo

func (m *ShareListFriendReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ShareListFriendReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ShareListFriendReply) GetData() *ShareListFriendData {
	if m != nil {
		return m.Data
	}
	return nil
}

type ShareListFriendData struct {
	Items                []*ShareListFriendDataItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	CountAll             int32                      `protobuf:"varint,2,opt,name=count_all,json=countAll,proto3" json:"count_all,omitempty"`
	CountNotReady        int32                      `protobuf:"varint,3,opt,name=count_not_ready,json=countNotReady,proto3" json:"count_not_ready,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ShareListFriendData) Reset()         { *m = ShareListFriendData{} }
func (m *ShareListFriendData) String() string { return proto.CompactTextString(m) }
func (*ShareListFriendData) ProtoMessage()    {}
func (*ShareListFriendData) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{4}
}
func (m *ShareListFriendData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareListFriendData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareListFriendData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareListFriendData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareListFriendData.Merge(m, src)
}
func (m *ShareListFriendData) XXX_Size() int {
	return m.Size()
}
func (m *ShareListFriendData) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareListFriendData.DiscardUnknown(m)
}

var xxx_messageInfo_ShareListFriendData proto.InternalMessageInfo

func (m *ShareListFriendData) GetItems() []*ShareListFriendDataItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ShareListFriendData) GetCountAll() int32 {
	if m != nil {
		return m.CountAll
	}
	return 0
}

func (m *ShareListFriendData) GetCountNotReady() int32 {
	if m != nil {
		return m.CountNotReady
	}
	return 0
}

type ShareListFriendDataItem struct {
	Id                   uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserName             string          `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	HeadImg              string          `protobuf:"bytes,4,opt,name=head_img,json=headImg,proto3" json:"head_img,omitempty"`
	Gender               Gender          `protobuf:"varint,5,opt,name=gender,proto3,enum=app.v2.Gender" json:"gender,omitempty"`
	Steps                map[string]bool `protobuf:"bytes,6,rep,name=steps,proto3" json:"steps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ClaimStatus          ClaimStatus     `protobuf:"varint,7,opt,name=claim_status,json=claimStatus,proto3,enum=share.v1.ClaimStatus" json:"claim_status,omitempty"`
	Coin                 int32           `protobuf:"varint,8,opt,name=coin,proto3" json:"coin,omitempty"`
	CreateAt             int64           `protobuf:"varint,9,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ShareListFriendDataItem) Reset()         { *m = ShareListFriendDataItem{} }
func (m *ShareListFriendDataItem) String() string { return proto.CompactTextString(m) }
func (*ShareListFriendDataItem) ProtoMessage()    {}
func (*ShareListFriendDataItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{5}
}
func (m *ShareListFriendDataItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareListFriendDataItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareListFriendDataItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareListFriendDataItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareListFriendDataItem.Merge(m, src)
}
func (m *ShareListFriendDataItem) XXX_Size() int {
	return m.Size()
}
func (m *ShareListFriendDataItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareListFriendDataItem.DiscardUnknown(m)
}

var xxx_messageInfo_ShareListFriendDataItem proto.InternalMessageInfo

func (m *ShareListFriendDataItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ShareListFriendDataItem) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ShareListFriendDataItem) GetHeadImg() string {
	if m != nil {
		return m.HeadImg
	}
	return ""
}

func (m *ShareListFriendDataItem) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_GENDER_UNKNOWN
}

func (m *ShareListFriendDataItem) GetSteps() map[string]bool {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *ShareListFriendDataItem) GetClaimStatus() ClaimStatus {
	if m != nil {
		return m.ClaimStatus
	}
	return ClaimStatus_UNKNOWN_CLAIM_STATUS
}

func (m *ShareListFriendDataItem) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *ShareListFriendDataItem) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

type ShareDataUrlReply struct {
	Code                 int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Msg                  string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 *ShareDataUrlReply_Url `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ShareDataUrlReply) Reset()         { *m = ShareDataUrlReply{} }
func (m *ShareDataUrlReply) String() string { return proto.CompactTextString(m) }
func (*ShareDataUrlReply) ProtoMessage()    {}
func (*ShareDataUrlReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{6}
}
func (m *ShareDataUrlReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareDataUrlReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareDataUrlReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareDataUrlReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareDataUrlReply.Merge(m, src)
}
func (m *ShareDataUrlReply) XXX_Size() int {
	return m.Size()
}
func (m *ShareDataUrlReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareDataUrlReply.DiscardUnknown(m)
}

var xxx_messageInfo_ShareDataUrlReply proto.InternalMessageInfo

func (m *ShareDataUrlReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ShareDataUrlReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ShareDataUrlReply) GetData() *ShareDataUrlReply_Url {
	if m != nil {
		return m.Data
	}
	return nil
}

type ShareDataUrlReply_Url struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareDataUrlReply_Url) Reset()         { *m = ShareDataUrlReply_Url{} }
func (m *ShareDataUrlReply_Url) String() string { return proto.CompactTextString(m) }
func (*ShareDataUrlReply_Url) ProtoMessage()    {}
func (*ShareDataUrlReply_Url) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{6, 0}
}
func (m *ShareDataUrlReply_Url) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareDataUrlReply_Url) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareDataUrlReply_Url.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareDataUrlReply_Url) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareDataUrlReply_Url.Merge(m, src)
}
func (m *ShareDataUrlReply_Url) XXX_Size() int {
	return m.Size()
}
func (m *ShareDataUrlReply_Url) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareDataUrlReply_Url.DiscardUnknown(m)
}

var xxx_messageInfo_ShareDataUrlReply_Url proto.InternalMessageInfo

func (m *ShareDataUrlReply_Url) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ShareDataTokenReply struct {
	Code                 int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Msg                  string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 *ShareDataTokenReply_Code `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ShareDataTokenReply) Reset()         { *m = ShareDataTokenReply{} }
func (m *ShareDataTokenReply) String() string { return proto.CompactTextString(m) }
func (*ShareDataTokenReply) ProtoMessage()    {}
func (*ShareDataTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{7}
}
func (m *ShareDataTokenReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareDataTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareDataTokenReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareDataTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareDataTokenReply.Merge(m, src)
}
func (m *ShareDataTokenReply) XXX_Size() int {
	return m.Size()
}
func (m *ShareDataTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareDataTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_ShareDataTokenReply proto.InternalMessageInfo

func (m *ShareDataTokenReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ShareDataTokenReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ShareDataTokenReply) GetData() *ShareDataTokenReply_Code {
	if m != nil {
		return m.Data
	}
	return nil
}

type ShareDataTokenReply_Code struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareDataTokenReply_Code) Reset()         { *m = ShareDataTokenReply_Code{} }
func (m *ShareDataTokenReply_Code) String() string { return proto.CompactTextString(m) }
func (*ShareDataTokenReply_Code) ProtoMessage()    {}
func (*ShareDataTokenReply_Code) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{7, 0}
}
func (m *ShareDataTokenReply_Code) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareDataTokenReply_Code) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareDataTokenReply_Code.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareDataTokenReply_Code) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareDataTokenReply_Code.Merge(m, src)
}
func (m *ShareDataTokenReply_Code) XXX_Size() int {
	return m.Size()
}
func (m *ShareDataTokenReply_Code) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareDataTokenReply_Code.DiscardUnknown(m)
}

var xxx_messageInfo_ShareDataTokenReply_Code proto.InternalMessageInfo

func (m *ShareDataTokenReply_Code) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type ShareAddInvitationRequest struct {
	InviteCode           string   `protobuf:"bytes,1,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareAddInvitationRequest) Reset()         { *m = ShareAddInvitationRequest{} }
func (m *ShareAddInvitationRequest) String() string { return proto.CompactTextString(m) }
func (*ShareAddInvitationRequest) ProtoMessage()    {}
func (*ShareAddInvitationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{8}
}
func (m *ShareAddInvitationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareAddInvitationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareAddInvitationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareAddInvitationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareAddInvitationRequest.Merge(m, src)
}
func (m *ShareAddInvitationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShareAddInvitationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareAddInvitationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShareAddInvitationRequest proto.InternalMessageInfo

func (m *ShareAddInvitationRequest) GetInviteCode() string {
	if m != nil {
		return m.InviteCode
	}
	return ""
}

type ShareEmptyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareEmptyRequest) Reset()         { *m = ShareEmptyRequest{} }
func (m *ShareEmptyRequest) String() string { return proto.CompactTextString(m) }
func (*ShareEmptyRequest) ProtoMessage()    {}
func (*ShareEmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{9}
}
func (m *ShareEmptyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareEmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareEmptyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareEmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareEmptyRequest.Merge(m, src)
}
func (m *ShareEmptyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShareEmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareEmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShareEmptyRequest proto.InternalMessageInfo

type ShareGenericReply struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareGenericReply) Reset()         { *m = ShareGenericReply{} }
func (m *ShareGenericReply) String() string { return proto.CompactTextString(m) }
func (*ShareGenericReply) ProtoMessage()    {}
func (*ShareGenericReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{10}
}
func (m *ShareGenericReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareGenericReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareGenericReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareGenericReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareGenericReply.Merge(m, src)
}
func (m *ShareGenericReply) XXX_Size() int {
	return m.Size()
}
func (m *ShareGenericReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareGenericReply.DiscardUnknown(m)
}

var xxx_messageInfo_ShareGenericReply proto.InternalMessageInfo

func (m *ShareGenericReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ShareGenericReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type TaskEvent struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               uint64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PackageName          string   `protobuf:"bytes,3,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	Channel              string   `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	EventName            string   `protobuf:"bytes,6,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	Score                int32    `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	DateTime             string   `protobuf:"bytes,8,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	ThirdPartyId         string   `protobuf:"bytes,9,opt,name=third_party_id,json=thirdPartyId,proto3" json:"third_party_id,omitempty"`
	DoneNum              int32    `protobuf:"varint,10,opt,name=done_num,json=doneNum,proto3" json:"done_num,omitempty"`
	TotalNum             int32    `protobuf:"varint,11,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	IsDone               bool     `protobuf:"varint,12,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	Ext                  string   `protobuf:"bytes,13,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskEvent) Reset()         { *m = TaskEvent{} }
func (m *TaskEvent) String() string { return proto.CompactTextString(m) }
func (*TaskEvent) ProtoMessage()    {}
func (*TaskEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{11}
}
func (m *TaskEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskEvent.Merge(m, src)
}
func (m *TaskEvent) XXX_Size() int {
	return m.Size()
}
func (m *TaskEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TaskEvent proto.InternalMessageInfo

func (m *TaskEvent) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaskEvent) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TaskEvent) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *TaskEvent) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *TaskEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskEvent) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *TaskEvent) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *TaskEvent) GetDateTime() string {
	if m != nil {
		return m.DateTime
	}
	return ""
}

func (m *TaskEvent) GetThirdPartyId() string {
	if m != nil {
		return m.ThirdPartyId
	}
	return ""
}

func (m *TaskEvent) GetDoneNum() int32 {
	if m != nil {
		return m.DoneNum
	}
	return 0
}

func (m *TaskEvent) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *TaskEvent) GetIsDone() bool {
	if m != nil {
		return m.IsDone
	}
	return false
}

func (m *TaskEvent) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

type SignEvent struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               uint64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PackageName          string   `protobuf:"bytes,3,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	Channel              string   `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	EventName            string   `protobuf:"bytes,6,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	Score                int32    `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	DateTime             string   `protobuf:"bytes,8,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	ThirdPartyId         string   `protobuf:"bytes,9,opt,name=third_party_id,json=thirdPartyId,proto3" json:"third_party_id,omitempty"`
	IsDouble             bool     `protobuf:"varint,10,opt,name=is_double,json=isDouble,proto3" json:"is_double,omitempty"`
	Ext                  string   `protobuf:"bytes,11,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignEvent) Reset()         { *m = SignEvent{} }
func (m *SignEvent) String() string { return proto.CompactTextString(m) }
func (*SignEvent) ProtoMessage()    {}
func (*SignEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{12}
}
func (m *SignEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignEvent.Merge(m, src)
}
func (m *SignEvent) XXX_Size() int {
	return m.Size()
}
func (m *SignEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SignEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SignEvent proto.InternalMessageInfo

func (m *SignEvent) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SignEvent) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SignEvent) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *SignEvent) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SignEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SignEvent) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *SignEvent) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *SignEvent) GetDateTime() string {
	if m != nil {
		return m.DateTime
	}
	return ""
}

func (m *SignEvent) GetThirdPartyId() string {
	if m != nil {
		return m.ThirdPartyId
	}
	return ""
}

func (m *SignEvent) GetIsDouble() bool {
	if m != nil {
		return m.IsDouble
	}
	return false
}

func (m *SignEvent) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func init() {
	proto.RegisterEnum("share.v1.ClaimStatus", ClaimStatus_name, ClaimStatus_value)
	proto.RegisterType((*ShareClaimRewardRequest)(nil), "share.v1.ShareClaimRewardRequest")
	proto.RegisterType((*ShareClaimRewardReply)(nil), "share.v1.ShareClaimRewardReply")
	proto.RegisterType((*ShareListFriendRequest)(nil), "share.v1.ShareListFriendRequest")
	proto.RegisterType((*ShareListFriendReply)(nil), "share.v1.ShareListFriendReply")
	proto.RegisterType((*ShareListFriendData)(nil), "share.v1.ShareListFriendData")
	proto.RegisterType((*ShareListFriendDataItem)(nil), "share.v1.ShareListFriendDataItem")
	proto.RegisterMapType((map[string]bool)(nil), "share.v1.ShareListFriendDataItem.StepsEntry")
	proto.RegisterType((*ShareDataUrlReply)(nil), "share.v1.ShareDataUrlReply")
	proto.RegisterType((*ShareDataUrlReply_Url)(nil), "share.v1.ShareDataUrlReply.Url")
	proto.RegisterType((*ShareDataTokenReply)(nil), "share.v1.ShareDataTokenReply")
	proto.RegisterType((*ShareDataTokenReply_Code)(nil), "share.v1.ShareDataTokenReply.Code")
	proto.RegisterType((*ShareAddInvitationRequest)(nil), "share.v1.ShareAddInvitationRequest")
	proto.RegisterType((*ShareEmptyRequest)(nil), "share.v1.ShareEmptyRequest")
	proto.RegisterType((*ShareGenericReply)(nil), "share.v1.ShareGenericReply")
	proto.RegisterType((*TaskEvent)(nil), "share.v1.TaskEvent")
	proto.RegisterType((*SignEvent)(nil), "share.v1.SignEvent")
}

func init() { proto.RegisterFile("share.proto", fileDescriptor_cd0836ea8f2388e7) }

var fileDescriptor_cd0836ea8f2388e7 = []byte{
	// 1384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0xcd, 0x6f, 0x1b, 0xd5,
	0x16, 0xef, 0xd8, 0x1e, 0xdb, 0x73, 0x9c, 0xe4, 0xa5, 0x37, 0x69, 0x33, 0x75, 0xd2, 0xd4, 0x9d,
	0x3e, 0x55, 0x51, 0xdf, 0xeb, 0x4c, 0xe2, 0x4a, 0xef, 0x95, 0x08, 0x24, 0x9c, 0x8f, 0x56, 0xa1,
	0xc5, 0xad, 0x26, 0x89, 0x2a, 0xba, 0x31, 0xb7, 0x33, 0x17, 0xfb, 0x92, 0x99, 0x3b, 0xc3, 0xcc,
	0xb5, 0x89, 0x59, 0xb2, 0x28, 0x08, 0x81, 0x10, 0xad, 0xa8, 0x00, 0xb1, 0xa9, 0xd8, 0xf1, 0x21,
	0x75, 0x47, 0xd5, 0xbf, 0x80, 0x25, 0x12, 0x7b, 0x54, 0xb5, 0x49, 0x40, 0x2c, 0x59, 0xb2, 0x40,
	0xe8, 0xde, 0xb1, 0x6b, 0xc7, 0x49, 0x83, 0x94, 0x2d, 0x9b, 0xe4, 0x9e, 0xdf, 0xf9, 0xbc, 0xbf,
	0x7b, 0xce, 0xf1, 0x40, 0x21, 0x6e, 0xe0, 0x88, 0x98, 0x61, 0x14, 0xf0, 0x00, 0xe5, 0x13, 0xa1,
	0x35, 0x57, 0x9c, 0xaa, 0x07, 0x41, 0xdd, 0x23, 0x16, 0x0e, 0xa9, 0x85, 0x19, 0x0b, 0x38, 0xe6,
	0x34, 0x60, 0x71, 0x62, 0x57, 0xfc, 0x8f, 0xfc, 0xe7, 0x9c, 0xaf, 0x13, 0x76, 0xbe, 0x85, 0x3d,
	0xea, 0x62, 0x4e, 0xac, 0x3d, 0x87, 0x8e, 0xb1, 0xd9, 0x67, 0x1c, 0x84, 0x84, 0xe1, 0x90, 0xb6,
	0xca, 0x56, 0x10, 0xca, 0x80, 0xfb, 0x04, 0x1f, 0xaf, 0x07, 0xf5, 0x40, 0x1e, 0x2d, 0x71, 0xea,
	0xa0, 0x1a, 0x0e, 0xc3, 0xe4, 0x68, 0xbc, 0x04, 0x13, 0xab, 0xa2, 0xce, 0x45, 0x0f, 0x53, 0xdf,
	0x26, 0x6f, 0xe3, 0xc8, 0xb5, 0xc9, 0x5b, 0x4d, 0x12, 0x73, 0x64, 0xc0, 0x10, 0x0e, 0xc3, 0x88,
	0x30, 0x4e, 0x1d, 0xb2, 0xe2, 0xea, 0x4a, 0x49, 0x99, 0xc9, 0xd8, 0xbb, 0x30, 0x63, 0x02, 0x8e,
	0xed, 0x75, 0x0f, 0xbd, 0xb6, 0xf1, 0x02, 0x1c, 0x97, 0x8a, 0xab, 0x34, 0xe6, 0x97, 0x22, 0x4a,
	0xd8, 0xb3, 0xb0, 0xa7, 0x40, 0x75, 0x49, 0xc8, 0x1b, 0x32, 0x9e, 0xba, 0xa0, 0xfd, 0xb1, 0x90,
	0x2d, 0x66, 0x66, 0x95, 0xd9, 0x94, 0x9d, 0xe0, 0x46, 0x1b, 0xc6, 0xf7, 0xb8, 0x86, 0x5e, 0x1b,
	0x4d, 0x41, 0xc6, 0x09, 0x5c, 0xd2, 0xf1, 0xcb, 0xff, 0xf6, 0xf3, 0x29, 0x29, 0xdb, 0xf2, 0x2f,
	0x1a, 0x85, 0xb4, 0x1f, 0xd7, 0xf5, 0x54, 0x49, 0x99, 0xd1, 0x6c, 0x71, 0x44, 0x73, 0x90, 0x71,
	0x31, 0xc7, 0x7a, 0xba, 0xa4, 0xcc, 0x14, 0xca, 0x27, 0xcd, 0xee, 0x7b, 0x98, 0x03, 0xd1, 0x97,
	0x30, 0xc7, 0xb6, 0x34, 0x35, 0xee, 0x2a, 0x30, 0xb6, 0x8f, 0x16, 0xfd, 0x1f, 0x54, 0xca, 0x89,
	0x1f, 0xeb, 0x4a, 0x29, 0x3d, 0x53, 0x28, 0x9f, 0x3e, 0x30, 0xd6, 0x0a, 0x27, 0xbe, 0x9d, 0xd8,
	0xa3, 0x49, 0xd0, 0x9c, 0xa0, 0xc9, 0x78, 0x0d, 0x7b, 0x9e, 0xac, 0x4d, 0xb5, 0xf3, 0x12, 0xa8,
	0x78, 0x1e, 0x3a, 0x0b, 0xff, 0x4a, 0x94, 0x2c, 0xe0, 0xb5, 0x88, 0x60, 0xb7, 0x2d, 0x6b, 0x55,
	0xed, 0x61, 0x09, 0x57, 0x03, 0x6e, 0x0b, 0xd0, 0xf8, 0x3d, 0xd5, 0x79, 0xa4, 0xbd, 0x79, 0xd0,
	0x08, 0xa4, 0x68, 0xf7, 0x69, 0x52, 0xd4, 0x15, 0x09, 0x9b, 0x31, 0x89, 0x6a, 0x0c, 0xfb, 0xa4,
	0x43, 0x46, 0x5e, 0x00, 0x55, 0xec, 0x13, 0x74, 0x02, 0xf2, 0x0d, 0x82, 0xdd, 0x1a, 0xf5, 0xeb,
	0x7a, 0x46, 0xea, 0x72, 0x42, 0x5e, 0xf1, 0xeb, 0xe8, 0x2c, 0x64, 0xeb, 0x84, 0xb9, 0x24, 0xd2,
	0xd5, 0x92, 0x32, 0x33, 0x52, 0x1e, 0x31, 0x45, 0x8f, 0xb4, 0xca, 0xe6, 0x65, 0x89, 0xda, 0x1d,
	0x2d, 0x5a, 0x00, 0x35, 0xe6, 0x24, 0x8c, 0xf5, 0xac, 0x64, 0xe2, 0xbf, 0x7f, 0xcb, 0x84, 0xb9,
	0x2a, 0xcc, 0x97, 0x19, 0x8f, 0xda, 0x76, 0xe2, 0x8a, 0x2e, 0xc2, 0x90, 0x23, 0xfa, 0xa5, 0x16,
	0x73, 0xcc, 0x9b, 0xb1, 0x9e, 0x93, 0x19, 0x8f, 0xf5, 0x42, 0xc9, 0x6e, 0x5a, 0x95, 0x4a, 0xbb,
	0xe0, 0xf4, 0x04, 0x84, 0x44, 0x0b, 0x50, 0xa6, 0xe7, 0x25, 0x4d, 0xf2, 0x2c, 0x29, 0x8e, 0x08,
	0xe6, 0xa4, 0x86, 0xb9, 0xae, 0x95, 0x94, 0x99, 0xb4, 0x9d, 0x4f, 0x80, 0x0a, 0x2f, 0x5e, 0x04,
	0xe8, 0xe5, 0x17, 0x3d, 0xb2, 0x41, 0xda, 0x92, 0x2d, 0xcd, 0x16, 0x47, 0x34, 0x0e, 0x6a, 0x0b,
	0x7b, 0xcd, 0x84, 0xaa, 0xbc, 0x9d, 0x08, 0xf3, 0xa9, 0x8b, 0x8a, 0xf1, 0x89, 0x02, 0x47, 0xe5,
	0x95, 0xc4, 0x45, 0xd6, 0x23, 0xef, 0x70, 0x3d, 0x78, 0x61, 0x57, 0x0f, 0x9e, 0x1a, 0x60, 0xab,
	0x3f, 0xb4, 0x29, 0x0e, 0xd2, 0xb8, 0x38, 0x01, 0xe9, 0xf5, 0xc8, 0x13, 0xd1, 0x9a, 0x91, 0xd7,
	0xad, 0xb6, 0x19, 0x79, 0xc6, 0xe7, 0xdd, 0xf6, 0x14, 0x8e, 0x6b, 0xc1, 0x06, 0x61, 0x87, 0xab,
	0xea, 0x7f, 0xbb, 0xaa, 0x32, 0xf6, 0xa9, 0xaa, 0x17, 0xdc, 0x5c, 0x94, 0x91, 0x64, 0x61, 0x45,
	0xc8, 0x08, 0x29, 0x79, 0x86, 0x4e, 0x3e, 0x2d, 0xc9, 0x62, 0xbc, 0x08, 0x27, 0xa4, 0x77, 0xc5,
	0x75, 0x57, 0x58, 0x8b, 0x26, 0x6b, 0xa8, 0x37, 0xf3, 0x05, 0x2a, 0x40, 0x52, 0xeb, 0xf3, 0x83,
	0x04, 0x12, 0x11, 0x8d, 0xb1, 0x0e, 0xd9, 0xcb, 0x7e, 0xc8, 0xdb, 0x1d, 0x2f, 0x63, 0xb1, 0x03,
	0x5e, 0x26, 0x8c, 0x44, 0xd4, 0x39, 0xd4, 0x5d, 0x8d, 0xc7, 0x29, 0xd0, 0xd6, 0x70, 0xbc, 0xb1,
	0xdc, 0x22, 0x8c, 0xf7, 0x8d, 0x8b, 0x2a, 0xc7, 0x65, 0x02, 0x72, 0x72, 0x5c, 0xa8, 0x2b, 0x7d,
	0x32, 0x76, 0x56, 0x88, 0x2b, 0x2e, 0x3a, 0x0d, 0x43, 0x21, 0x76, 0x36, 0x70, 0x9d, 0x24, 0xa3,
	0x94, 0x96, 0x11, 0x0b, 0x1d, 0x4c, 0x4e, 0x93, 0x0e, 0x39, 0xa7, 0x81, 0x19, 0x23, 0x5e, 0x77,
	0x98, 0x3a, 0xa2, 0xe0, 0x47, 0x3a, 0xa9, 0x09, 0x3f, 0xe2, 0x8c, 0x4e, 0x02, 0x10, 0x51, 0x42,
	0x12, 0x2e, 0x2b, 0x35, 0x9a, 0x44, 0x64, 0xb0, 0x71, 0x50, 0x63, 0x27, 0x88, 0x88, 0x1c, 0x06,
	0xd5, 0x4e, 0x04, 0xd1, 0xdb, 0x62, 0xf9, 0xd7, 0x38, 0xf5, 0x89, 0x6c, 0x7a, 0xcd, 0xce, 0x0b,
	0x60, 0x8d, 0xfa, 0x04, 0xfd, 0x1b, 0x46, 0x78, 0x83, 0x46, 0x6e, 0x2d, 0xc4, 0x11, 0x6f, 0x8b,
	0x2b, 0x68, 0xd2, 0x62, 0x48, 0xa2, 0xd7, 0x05, 0xb8, 0xe2, 0x8a, 0x99, 0x77, 0x03, 0x46, 0x6a,
	0xac, 0xe9, 0xeb, 0x20, 0x63, 0xe7, 0x84, 0x5c, 0x6d, 0xfa, 0x22, 0x3a, 0x0f, 0x38, 0xf6, 0xa4,
	0xae, 0x90, 0x2c, 0x27, 0x09, 0x08, 0xe5, 0x04, 0xe4, 0x68, 0x5c, 0x13, 0xa6, 0xfa, 0x90, 0x9c,
	0x8d, 0x2c, 0x8d, 0x97, 0x02, 0x26, 0x29, 0x26, 0x9b, 0x5c, 0x1f, 0x4e, 0x28, 0x26, 0x9b, 0xdc,
	0xf8, 0x36, 0x05, 0xda, 0x2a, 0xad, 0xb3, 0x7f, 0x2a, 0xc5, 0x93, 0xa0, 0x49, 0xaa, 0x9a, 0xb7,
	0x3c, 0x22, 0x39, 0xce, 0xdb, 0x79, 0x41, 0x96, 0x90, 0xbb, 0x74, 0x15, 0x9e, 0xd1, 0x75, 0xee,
	0x0a, 0x14, 0xfa, 0x16, 0x1c, 0xd2, 0x61, 0x7c, 0xbd, 0x7a, 0xa5, 0x7a, 0xed, 0x46, 0xb5, 0xb6,
	0x78, 0xb5, 0xb2, 0xf2, 0x6a, 0x6d, 0x75, 0xad, 0xb2, 0xb6, 0xbe, 0x3a, 0x7a, 0x04, 0xe5, 0x21,
	0xb3, 0x74, 0xad, 0xba, 0x3c, 0xaa, 0x20, 0x0d, 0x54, 0x7b, 0xb9, 0xb2, 0xf4, 0xda, 0x68, 0x0a,
	0x0d, 0x83, 0x56, 0xbd, 0xb6, 0x56, 0x4b, 0xc4, 0x74, 0xf9, 0x17, 0x15, 0x54, 0x39, 0x24, 0xe8,
	0x75, 0x28, 0xc8, 0xc1, 0x23, 0x0b, 0x6d, 0xb1, 0x3d, 0x26, 0x07, 0xa6, 0xba, 0x7f, 0xb2, 0x8a,
	0x93, 0x07, 0x2c, 0x22, 0x63, 0xe2, 0x4e, 0x25, 0x0f, 0xd9, 0xed, 0xf7, 0x6f, 0x6f, 0x3d, 0xfa,
	0xe6, 0xdd, 0x9f, 0xb6, 0xee, 0xa6, 0xb2, 0x28, 0x63, 0x35, 0x23, 0x0f, 0x11, 0x18, 0xee, 0x66,
	0x90, 0xfb, 0xe1, 0xe0, 0x1c, 0x27, 0x0f, 0x5c, 0x2b, 0x86, 0x3e, 0x98, 0x25, 0x87, 0x54, 0x4b,
	0xce, 0x70, 0x04, 0x47, 0x77, 0x2d, 0x11, 0xb9, 0x72, 0xce, 0x0c, 0x44, 0xdb, 0x6f, 0xcd, 0xec,
	0xb9, 0x56, 0xff, 0xe2, 0x30, 0x26, 0x07, 0x13, 0x42, 0x31, 0x49, 0x38, 0xaf, 0x9c, 0x43, 0x0d,
	0x80, 0xde, 0x4f, 0x17, 0x2a, 0x3d, 0xf7, 0x57, 0xad, 0x9b, 0x69, 0xfa, 0x00, 0x8b, 0xe7, 0xde,
	0xce, 0xa3, 0x31, 0x47, 0x1b, 0x9d, 0xd7, 0x4f, 0x3e, 0x96, 0xd0, 0xe0, 0xa7, 0xc4, 0xde, 0xef,
	0xb0, 0x83, 0x6f, 0x35, 0x35, 0x98, 0xa8, 0x60, 0x64, 0x2d, 0xf9, 0x93, 0x29, 0xae, 0xe5, 0xc2,
	0xf0, 0xf5, 0x66, 0xdc, 0xe8, 0x0d, 0xe7, 0x58, 0x5f, 0xac, 0x2e, 0x78, 0x70, 0x82, 0xd3, 0x83,
	0x09, 0x46, 0x8d, 0x82, 0x25, 0x87, 0xca, 0x8a, 0x69, 0x9d, 0xf5, 0x65, 0xe9, 0x6d, 0xd9, 0xbe,
	0x2c, 0xcf, 0xc0, 0x43, 0x67, 0xe1, 0x38, 0xde, 0x98, 0x57, 0xce, 0x2d, 0xfc, 0xa9, 0xdc, 0xa9,
	0x3c, 0x55, 0xd0, 0x25, 0x98, 0xdc, 0xfe, 0xf4, 0xf6, 0xd6, 0xc3, 0x2f, 0xb6, 0x3f, 0xbc, 0xb7,
	0xf5, 0xf0, 0xbb, 0xed, 0x8f, 0x1f, 0x24, 0x5e, 0x3b, 0x5f, 0x7e, 0xb4, 0xfd, 0xc1, 0x7d, 0xa3,
	0x04, 0xd9, 0x5f, 0x1f, 0x7c, 0xbf, 0xf3, 0xe8, 0xeb, 0xe2, 0xf1, 0x7a, 0x73, 0x93, 0xbe, 0x4c,
	0xd9, 0x1b, 0x94, 0x51, 0x4e, 0x49, 0x6c, 0x3a, 0x81, 0x6f, 0x3a, 0xac, 0xac, 0xce, 0x9a, 0x73,
	0xe6, 0xac, 0xa1, 0x59, 0xb2, 0x1c, 0xab, 0x35, 0x57, 0x1e, 0xc5, 0x61, 0xe8, 0x51, 0x47, 0xb6,
	0x92, 0xf5, 0x66, 0x1c, 0xb0, 0xf9, 0x3d, 0xc8, 0xcd, 0x29, 0x28, 0x42, 0xfa, 0x95, 0x1b, 0x6b,
	0x68, 0x2c, 0x9f, 0x2a, 0x0e, 0x57, 0x9a, 0xbc, 0x11, 0x44, 0xf4, 0x1d, 0x69, 0x50, 0x4a, 0xdd,
	0xd2, 0x20, 0x97, 0x68, 0x8f, 0x44, 0x15, 0x38, 0x36, 0x50, 0xdf, 0xce, 0xbd, 0xf7, 0x76, 0xee,
	0x7f, 0x85, 0x66, 0x1a, 0x9c, 0x87, 0xf3, 0x96, 0xe5, 0x07, 0x8c, 0xf0, 0x8e, 0xeb, 0x79, 0x37,
	0x70, 0x62, 0x73, 0xb3, 0x6e, 0x72, 0x5c, 0xe7, 0xd4, 0x31, 0x1d, 0x66, 0x9d, 0xb1, 0x7e, 0x78,
	0x32, 0xad, 0xfc, 0xf8, 0x64, 0x5a, 0x79, 0xfc, 0x64, 0x5a, 0xf9, 0xec, 0xe9, 0xf4, 0x91, 0x9b,
	0xea, 0x06, 0xe5, 0xbc, 0x7d, 0x2b, 0x2b, 0xbf, 0xd8, 0x2f, 0xfc, 0x15, 0x00, 0x00, 0xff, 0xff,
	0x15, 0xc9, 0x08, 0xe5, 0x66, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShareClient is the client API for Share service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShareClient interface {
	// 获取邀请链接
	InviteByUrl(ctx context.Context, in *ShareEmptyRequest, opts ...grpc.CallOption) (*ShareDataUrlReply, error)
	// 获取邀请码
	InviteByToken(ctx context.Context, in *ShareEmptyRequest, opts ...grpc.CallOption) (*ShareDataTokenReply, error)
	// 填写邀请码
	AddInvitationCode(ctx context.Context, in *ShareAddInvitationRequest, opts ...grpc.CallOption) (*ShareGenericReply, error)
	// 获取邀请列表
	ListFriend(ctx context.Context, in *ShareListFriendRequest, opts ...grpc.CallOption) (*ShareListFriendReply, error)
	// 领取邀请后的奖励
	ClaimReward(ctx context.Context, in *ShareClaimRewardRequest, opts ...grpc.CallOption) (*ShareGenericReply, error)
	// 手动推送签到事件
	PushSignEvent(ctx context.Context, in *SignEvent, opts ...grpc.CallOption) (*ShareGenericReply, error)
	// 手动推送任务事件
	PushTaskEvent(ctx context.Context, in *TaskEvent, opts ...grpc.CallOption) (*ShareGenericReply, error)
}

type shareClient struct {
	cc *grpc.ClientConn
}

func NewShareClient(cc *grpc.ClientConn) ShareClient {
	return &shareClient{cc}
}

func (c *shareClient) InviteByUrl(ctx context.Context, in *ShareEmptyRequest, opts ...grpc.CallOption) (*ShareDataUrlReply, error) {
	out := new(ShareDataUrlReply)
	err := c.cc.Invoke(ctx, "/share.v1.Share/InviteByUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) InviteByToken(ctx context.Context, in *ShareEmptyRequest, opts ...grpc.CallOption) (*ShareDataTokenReply, error) {
	out := new(ShareDataTokenReply)
	err := c.cc.Invoke(ctx, "/share.v1.Share/InviteByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) AddInvitationCode(ctx context.Context, in *ShareAddInvitationRequest, opts ...grpc.CallOption) (*ShareGenericReply, error) {
	out := new(ShareGenericReply)
	err := c.cc.Invoke(ctx, "/share.v1.Share/AddInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ListFriend(ctx context.Context, in *ShareListFriendRequest, opts ...grpc.CallOption) (*ShareListFriendReply, error) {
	out := new(ShareListFriendReply)
	err := c.cc.Invoke(ctx, "/share.v1.Share/ListFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ClaimReward(ctx context.Context, in *ShareClaimRewardRequest, opts ...grpc.CallOption) (*ShareGenericReply, error) {
	out := new(ShareGenericReply)
	err := c.cc.Invoke(ctx, "/share.v1.Share/ClaimReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) PushSignEvent(ctx context.Context, in *SignEvent, opts ...grpc.CallOption) (*ShareGenericReply, error) {
	out := new(ShareGenericReply)
	err := c.cc.Invoke(ctx, "/share.v1.Share/PushSignEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) PushTaskEvent(ctx context.Context, in *TaskEvent, opts ...grpc.CallOption) (*ShareGenericReply, error) {
	out := new(ShareGenericReply)
	err := c.cc.Invoke(ctx, "/share.v1.Share/PushTaskEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShareServer is the server API for Share service.
type ShareServer interface {
	// 获取邀请链接
	InviteByUrl(context.Context, *ShareEmptyRequest) (*ShareDataUrlReply, error)
	// 获取邀请码
	InviteByToken(context.Context, *ShareEmptyRequest) (*ShareDataTokenReply, error)
	// 填写邀请码
	AddInvitationCode(context.Context, *ShareAddInvitationRequest) (*ShareGenericReply, error)
	// 获取邀请列表
	ListFriend(context.Context, *ShareListFriendRequest) (*ShareListFriendReply, error)
	// 领取邀请后的奖励
	ClaimReward(context.Context, *ShareClaimRewardRequest) (*ShareGenericReply, error)
	// 手动推送签到事件
	PushSignEvent(context.Context, *SignEvent) (*ShareGenericReply, error)
	// 手动推送任务事件
	PushTaskEvent(context.Context, *TaskEvent) (*ShareGenericReply, error)
}

// UnimplementedShareServer can be embedded to have forward compatible implementations.
type UnimplementedShareServer struct {
}

func (*UnimplementedShareServer) InviteByUrl(ctx context.Context, req *ShareEmptyRequest) (*ShareDataUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteByUrl not implemented")
}
func (*UnimplementedShareServer) InviteByToken(ctx context.Context, req *ShareEmptyRequest) (*ShareDataTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteByToken not implemented")
}
func (*UnimplementedShareServer) AddInvitationCode(ctx context.Context, req *ShareAddInvitationRequest) (*ShareGenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInvitationCode not implemented")
}
func (*UnimplementedShareServer) ListFriend(ctx context.Context, req *ShareListFriendRequest) (*ShareListFriendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriend not implemented")
}
func (*UnimplementedShareServer) ClaimReward(ctx context.Context, req *ShareClaimRewardRequest) (*ShareGenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimReward not implemented")
}
func (*UnimplementedShareServer) PushSignEvent(ctx context.Context, req *SignEvent) (*ShareGenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSignEvent not implemented")
}
func (*UnimplementedShareServer) PushTaskEvent(ctx context.Context, req *TaskEvent) (*ShareGenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTaskEvent not implemented")
}

func RegisterShareServer(s *grpc.Server, srv ShareServer) {
	s.RegisterService(&_Share_serviceDesc, srv)
}

func _Share_InviteByUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).InviteByUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.v1.Share/InviteByUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).InviteByUrl(ctx, req.(*ShareEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_InviteByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).InviteByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.v1.Share/InviteByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).InviteByToken(ctx, req.(*ShareEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_AddInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareAddInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).AddInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.v1.Share/AddInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).AddInvitationCode(ctx, req.(*ShareAddInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ListFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareListFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).ListFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.v1.Share/ListFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).ListFriend(ctx, req.(*ShareListFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ClaimReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareClaimRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).ClaimReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.v1.Share/ClaimReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).ClaimReward(ctx, req.(*ShareClaimRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_PushSignEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).PushSignEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.v1.Share/PushSignEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).PushSignEvent(ctx, req.(*SignEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_PushTaskEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).PushTaskEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.v1.Share/PushTaskEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).PushTaskEvent(ctx, req.(*TaskEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _Share_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.v1.Share",
	HandlerType: (*ShareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InviteByUrl",
			Handler:    _Share_InviteByUrl_Handler,
		},
		{
			MethodName: "InviteByToken",
			Handler:    _Share_InviteByToken_Handler,
		},
		{
			MethodName: "AddInvitationCode",
			Handler:    _Share_AddInvitationCode_Handler,
		},
		{
			MethodName: "ListFriend",
			Handler:    _Share_ListFriend_Handler,
		},
		{
			MethodName: "ClaimReward",
			Handler:    _Share_ClaimReward_Handler,
		},
		{
			MethodName: "PushSignEvent",
			Handler:    _Share_PushSignEvent_Handler,
		},
		{
			MethodName: "PushTaskEvent",
			Handler:    _Share_PushTaskEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "share.proto",
}

func (m *ShareClaimRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareClaimRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareClaimRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApprenticeId != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.ApprenticeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShareClaimRewardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareClaimRewardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareClaimRewardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ShareListFriendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareListFriendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareListFriendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Depth != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Depth))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShareListFriendReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareListFriendReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareListFriendReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShare(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShareListFriendData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareListFriendData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareListFriendData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CountNotReady != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.CountNotReady))
		i--
		dAtA[i] = 0x18
	}
	if m.CountAll != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.CountAll))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShare(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShareListFriendDataItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareListFriendDataItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareListFriendDataItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateAt != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x48
	}
	if m.Coin != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Coin))
		i--
		dAtA[i] = 0x40
	}
	if m.ClaimStatus != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.ClaimStatus))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Steps) > 0 {
		for k := range m.Steps {
			v := m.Steps[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintShare(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintShare(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Gender != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x28
	}
	if len(m.HeadImg) > 0 {
		i -= len(m.HeadImg)
		copy(dAtA[i:], m.HeadImg)
		i = encodeVarintShare(dAtA, i, uint64(len(m.HeadImg)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintShare(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShareDataUrlReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareDataUrlReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareDataUrlReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShare(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShareDataUrlReply_Url) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareDataUrlReply_Url) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareDataUrlReply_Url) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShareDataTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareDataTokenReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareDataTokenReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShare(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShareDataTokenReply_Code) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareDataTokenReply_Code) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareDataTokenReply_Code) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShareAddInvitationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareAddInvitationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareAddInvitationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InviteCode) > 0 {
		i -= len(m.InviteCode)
		copy(dAtA[i:], m.InviteCode)
		i = encodeVarintShare(dAtA, i, uint64(len(m.InviteCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShareEmptyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareEmptyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareEmptyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ShareGenericReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareGenericReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareGenericReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsDone {
		i--
		if m.IsDone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.TotalNum != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x58
	}
	if m.DoneNum != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.DoneNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ThirdPartyId) > 0 {
		i -= len(m.ThirdPartyId)
		copy(dAtA[i:], m.ThirdPartyId)
		i = encodeVarintShare(dAtA, i, uint64(len(m.ThirdPartyId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DateTime) > 0 {
		i -= len(m.DateTime)
		copy(dAtA[i:], m.DateTime)
		i = encodeVarintShare(dAtA, i, uint64(len(m.DateTime)))
		i--
		dAtA[i] = 0x42
	}
	if m.Score != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x38
	}
	if len(m.EventName) > 0 {
		i -= len(m.EventName)
		copy(dAtA[i:], m.EventName)
		i = encodeVarintShare(dAtA, i, uint64(len(m.EventName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PackageName) > 0 {
		i -= len(m.PackageName)
		copy(dAtA[i:], m.PackageName)
		i = encodeVarintShare(dAtA, i, uint64(len(m.PackageName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x5a
	}
	if m.IsDouble {
		i--
		if m.IsDouble {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.ThirdPartyId) > 0 {
		i -= len(m.ThirdPartyId)
		copy(dAtA[i:], m.ThirdPartyId)
		i = encodeVarintShare(dAtA, i, uint64(len(m.ThirdPartyId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DateTime) > 0 {
		i -= len(m.DateTime)
		copy(dAtA[i:], m.DateTime)
		i = encodeVarintShare(dAtA, i, uint64(len(m.DateTime)))
		i--
		dAtA[i] = 0x42
	}
	if m.Score != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x38
	}
	if len(m.EventName) > 0 {
		i -= len(m.EventName)
		copy(dAtA[i:], m.EventName)
		i = encodeVarintShare(dAtA, i, uint64(len(m.EventName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintShare(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PackageName) > 0 {
		i -= len(m.PackageName)
		copy(dAtA[i:], m.PackageName)
		i = encodeVarintShare(dAtA, i, uint64(len(m.PackageName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintShare(dAtA []byte, offset int, v uint64) int {
	offset -= sovShare(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShareClaimRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApprenticeId != 0 {
		n += 1 + sovShare(uint64(m.ApprenticeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareClaimRewardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareListFriendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Depth != 0 {
		n += 1 + sovShare(uint64(m.Depth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareListFriendReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovShare(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovShare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareListFriendData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovShare(uint64(l))
		}
	}
	if m.CountAll != 0 {
		n += 1 + sovShare(uint64(m.CountAll))
	}
	if m.CountNotReady != 0 {
		n += 1 + sovShare(uint64(m.CountNotReady))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareListFriendDataItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShare(uint64(m.Id))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.HeadImg)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovShare(uint64(m.Gender))
	}
	if len(m.Steps) > 0 {
		for k, v := range m.Steps {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovShare(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovShare(uint64(mapEntrySize))
		}
	}
	if m.ClaimStatus != 0 {
		n += 1 + sovShare(uint64(m.ClaimStatus))
	}
	if m.Coin != 0 {
		n += 1 + sovShare(uint64(m.Coin))
	}
	if m.CreateAt != 0 {
		n += 1 + sovShare(uint64(m.CreateAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareDataUrlReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovShare(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovShare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareDataUrlReply_Url) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareDataTokenReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovShare(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovShare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareDataTokenReply_Code) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareAddInvitationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InviteCode)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareEmptyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareGenericReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovShare(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShare(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovShare(uint64(m.UserId))
	}
	l = len(m.PackageName)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.EventName)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovShare(uint64(m.Score))
	}
	l = len(m.DateTime)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.ThirdPartyId)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.DoneNum != 0 {
		n += 1 + sovShare(uint64(m.DoneNum))
	}
	if m.TotalNum != 0 {
		n += 1 + sovShare(uint64(m.TotalNum))
	}
	if m.IsDone {
		n += 2
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShare(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovShare(uint64(m.UserId))
	}
	l = len(m.PackageName)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.EventName)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovShare(uint64(m.Score))
	}
	l = len(m.DateTime)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	l = len(m.ThirdPartyId)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.IsDouble {
		n += 2
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovShare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovShare(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShare(x uint64) (n int) {
	return sovShare(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShareClaimRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareClaimRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareClaimRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprenticeId", wireType)
			}
			m.ApprenticeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApprenticeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareClaimRewardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareClaimRewardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareClaimRewardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareListFriendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareListFriendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareListFriendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareListFriendReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareListFriendReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareListFriendReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ShareListFriendData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareListFriendData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareListFriendData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareListFriendData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ShareListFriendDataItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountAll", wireType)
			}
			m.CountAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountAll |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountNotReady", wireType)
			}
			m.CountNotReady = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountNotReady |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareListFriendDataItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareListFriendDataItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareListFriendDataItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= Gender(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Steps == nil {
				m.Steps = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShare
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShare
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthShare
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthShare
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShare
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipShare(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthShare
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Steps[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStatus", wireType)
			}
			m.ClaimStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimStatus |= ClaimStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareDataUrlReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareDataUrlReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareDataUrlReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ShareDataUrlReply_Url{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareDataUrlReply_Url) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Url: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Url: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareDataTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareDataTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareDataTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ShareDataTokenReply_Code{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareDataTokenReply_Code) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Code: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Code: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareAddInvitationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareAddInvitationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareAddInvitationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareEmptyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareEmptyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareEmptyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareGenericReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareGenericReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareGenericReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirdPartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThirdPartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneNum", wireType)
			}
			m.DoneNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoneNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDone = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirdPartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThirdPartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDouble", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDouble = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShare(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShare
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShare
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShare
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShare
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShare        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShare          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShare = fmt.Errorf("proto: unexpected end of group")
)
