// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: share.proto

package kitty

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _share_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ShareClaimRewardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ShareClaimRewardRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApprenticeId

	return nil
}

// ShareClaimRewardRequestValidationError is the validation error returned by
// ShareClaimRewardRequest.Validate if the designated constraints aren't met.
type ShareClaimRewardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareClaimRewardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareClaimRewardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareClaimRewardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareClaimRewardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareClaimRewardRequestValidationError) ErrorName() string {
	return "ShareClaimRewardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShareClaimRewardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareClaimRewardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareClaimRewardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareClaimRewardRequestValidationError{}

// Validate checks the field values on ShareClaimRewardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ShareClaimRewardReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ShareClaimRewardReplyValidationError is the validation error returned by
// ShareClaimRewardReply.Validate if the designated constraints aren't met.
type ShareClaimRewardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareClaimRewardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareClaimRewardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareClaimRewardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareClaimRewardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareClaimRewardReplyValidationError) ErrorName() string {
	return "ShareClaimRewardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ShareClaimRewardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareClaimRewardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareClaimRewardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareClaimRewardReplyValidationError{}

// Validate checks the field values on ShareListFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ShareListFriendRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Depth

	return nil
}

// ShareListFriendRequestValidationError is the validation error returned by
// ShareListFriendRequest.Validate if the designated constraints aren't met.
type ShareListFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareListFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareListFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareListFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareListFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareListFriendRequestValidationError) ErrorName() string {
	return "ShareListFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShareListFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareListFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareListFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareListFriendRequestValidationError{}

// Validate checks the field values on ShareListFriendReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ShareListFriendReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Msg

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareListFriendReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ShareListFriendReplyValidationError is the validation error returned by
// ShareListFriendReply.Validate if the designated constraints aren't met.
type ShareListFriendReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareListFriendReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareListFriendReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareListFriendReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareListFriendReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareListFriendReplyValidationError) ErrorName() string {
	return "ShareListFriendReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ShareListFriendReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareListFriendReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareListFriendReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareListFriendReplyValidationError{}

// Validate checks the field values on ShareListFriendData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ShareListFriendData) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShareListFriendDataValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ShareListFriendDataValidationError is the validation error returned by
// ShareListFriendData.Validate if the designated constraints aren't met.
type ShareListFriendDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareListFriendDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareListFriendDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareListFriendDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareListFriendDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareListFriendDataValidationError) ErrorName() string {
	return "ShareListFriendDataValidationError"
}

// Error satisfies the builtin error interface
func (e ShareListFriendDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareListFriendData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareListFriendDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareListFriendDataValidationError{}

// Validate checks the field values on ShareListFriendDataItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ShareListFriendDataItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserName

	// no validation rules for HeadImg

	// no validation rules for Gender

	// no validation rules for Steps

	// no validation rules for ClaimStatus

	// no validation rules for Coin

	// no validation rules for CreateAt

	return nil
}

// ShareListFriendDataItemValidationError is the validation error returned by
// ShareListFriendDataItem.Validate if the designated constraints aren't met.
type ShareListFriendDataItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareListFriendDataItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareListFriendDataItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareListFriendDataItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareListFriendDataItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareListFriendDataItemValidationError) ErrorName() string {
	return "ShareListFriendDataItemValidationError"
}

// Error satisfies the builtin error interface
func (e ShareListFriendDataItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareListFriendDataItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareListFriendDataItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareListFriendDataItemValidationError{}

// Validate checks the field values on ShareDataReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ShareDataReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Data

	return nil
}

// ShareDataReplyValidationError is the validation error returned by
// ShareDataReply.Validate if the designated constraints aren't met.
type ShareDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareDataReplyValidationError) ErrorName() string { return "ShareDataReplyValidationError" }

// Error satisfies the builtin error interface
func (e ShareDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareDataReplyValidationError{}

// Validate checks the field values on ShareAddInvitationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ShareAddInvitationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InviteCode

	return nil
}

// ShareAddInvitationRequestValidationError is the validation error returned by
// ShareAddInvitationRequest.Validate if the designated constraints aren't met.
type ShareAddInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareAddInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareAddInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareAddInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareAddInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareAddInvitationRequestValidationError) ErrorName() string {
	return "ShareAddInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShareAddInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareAddInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareAddInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareAddInvitationRequestValidationError{}

// Validate checks the field values on ShareEmptyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ShareEmptyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ShareEmptyRequestValidationError is the validation error returned by
// ShareEmptyRequest.Validate if the designated constraints aren't met.
type ShareEmptyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareEmptyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareEmptyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareEmptyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareEmptyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareEmptyRequestValidationError) ErrorName() string {
	return "ShareEmptyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShareEmptyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareEmptyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareEmptyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareEmptyRequestValidationError{}

// Validate checks the field values on ShareGenericReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ShareGenericReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Msg

	return nil
}

// ShareGenericReplyValidationError is the validation error returned by
// ShareGenericReply.Validate if the designated constraints aren't met.
type ShareGenericReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareGenericReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareGenericReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareGenericReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareGenericReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareGenericReplyValidationError) ErrorName() string {
	return "ShareGenericReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ShareGenericReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareGenericReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareGenericReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareGenericReplyValidationError{}
